name: CI

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:

jobs:
  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          SKIP_CLI_VERIFY: "true"
          ADMIN_API_KEY: test-key
          SQLITE_DB: ${{ github.workspace }}/.tmp/tenant_proxy_test.db
          POLICY_FILE: ${{ github.workspace }}/.tmp/policy.csv
        run: |
          mkdir -p .tmp
          pytest -q

  docker:
    name: Build and Push Image
    if: github.event_name != 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: meta
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          IMAGE="ghcr.io/${REPO_OWNER}/${REPO_NAME}"
          SHORT_SHA=${GITHUB_SHA::7}
          TAGS="${IMAGE}:sha-${SHORT_SHA}"
          if [ "${GITHUB_REF_TYPE}" = "branch" ] && [ "${GITHUB_REF_NAME}" = "main" ]; then
            TAGS="$TAGS,${IMAGE}:latest"
          fi
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            TAGS="$TAGS,${IMAGE}:${GITHUB_REF_NAME}"
          fi
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

