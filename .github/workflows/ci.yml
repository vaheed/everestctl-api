name: CI

on:
  push:

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest -q
      - name: Build Docker image (smoke test)
        run: |
          docker build -t everestctl-api:${{ github.sha }} .
      - name: Run container and smoke test
        env:
          ADMIN_API_KEY: changeme
        run: |
          docker run -d --rm --name everestctl-api \
            -e ADMIN_API_KEY=${ADMIN_API_KEY} \
            -p 18080:8080 everestctl-api:${{ github.sha }}
          # Wait for readiness
          for i in $(seq 1 30); do \
            curl -sSsf http://127.0.0.1:18080/readyz && break || sleep 1; \
          done
          # Health check returns ok=true
          curl -sSsf http://127.0.0.1:18080/healthz | grep -E '"ok"[[:space:]]*:[[:space:]]*true'
      - name: Cleanup container
        if: ${{ always() }}
        run: |
          docker ps -a
          docker logs everestctl-api || true
          docker rm -f everestctl-api || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image meta
        id: meta
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          IMAGE="ghcr.io/${REPO_OWNER}/${REPO_NAME}"
          SHORT_SHA=${GITHUB_SHA::7}
          TAGS="${IMAGE}:sha-${SHORT_SHA}"
          if [ "${GITHUB_REF_TYPE}" = "branch" ] && [ "${GITHUB_REF_NAME}" = "main" ]; then
            TAGS="$TAGS,${IMAGE}:latest"
          fi
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            TAGS="$TAGS,${IMAGE}:${GITHUB_REF_NAME}"
          fi
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Deploy to K8s (optional)
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        if: ${{ env.KUBECONFIG_B64 != '' }}
        run: |
          echo "$KUBECONFIG_B64" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          # kubectl apply -f deploy.yaml  # hook up your manifests here
          echo "deploy skipped (no manifests)"
