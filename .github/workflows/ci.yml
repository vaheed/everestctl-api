name: CI

on:
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest -q
      - name: Build Docker image (smoke test)
        run: |
          docker build -t everestctl-api:${{ github.sha }} .
      - name: Run container and smoke test
        env:
          ADMIN_API_KEY: changeme
        run: |
          docker run -d --rm --name everestctl-api \
            -e ADMIN_API_KEY=${ADMIN_API_KEY} \
            -p 18080:8080 everestctl-api:${{ github.sha }}
          # Wait for readiness
          for i in $(seq 1 30); do \
            curl -sSsf http://127.0.0.1:18080/readyz && break || sleep 1; \
          done
          # Health check returns ok=true
          curl -sSsf http://127.0.0.1:18080/healthz | grep '"ok": true'
      - name: Cleanup container
        if: ${{ always() }}
        run: |
          docker ps -a
          docker logs everestctl-api || true
          docker rm -f everestctl-api || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to registry
        if: ${{ secrets.REGISTRY && secrets.REGISTRY_USERNAME && secrets.REGISTRY_PASSWORD }}
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY }} -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
      - name: Build image
        run: |
          docker build -t ${{ secrets.REGISTRY || 'local' }}/${{ github.repository }}:${{ github.sha }} .
      - name: Push image
        if: ${{ secrets.REGISTRY && secrets.REGISTRY_USERNAME && secrets.REGISTRY_PASSWORD }}
        run: |
          docker push ${{ secrets.REGISTRY }}/${{ github.repository }}:${{ github.sha }}
      - name: Deploy to K8s (optional)
        if: ${{ secrets.KUBECONFIG_B64 }}
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          echo "$KUBECONFIG_B64" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          # kubectl apply -f deploy.yaml  # hook up your manifests here
          echo "deploy skipped (no manifests)"
